{"changed":true,"filter":false,"title":"app.coffee","tooltip":"/coffee/app.coffee","value":"# # stagapp\n# vim: et:ts=2:sw=2:sts=2\n# ## data handler for clinical recording of SensorTag data\n# SensorTag object.\n\nwindow.$ = $ = require('jquery')\n_ = require('underscore')\nBackbone = require ('backbone')\nrequire('./lib/console')\n\nPylonTemplate = Backbone.Model.extend\n    scan: false\n\nwindow.Pylon = Pylon = new PylonTemplate\nPylon.on 'all', (event,rest...)->\n  mim = event.match /((.*):.*):/\n  return null if !mim || mim[2] != 'systemEvent'\n  Pylon.trigger mim[1],event,rest\n  Pylon.trigger mim[2],event,rest\n  return null\n\nPylon.set 'spearCount', 1\nPylon.set 'hostUrl', hostUrl\n# set the button MpdelView\nPylon.set 'BV', BV = require './views/button-view.coffee'\n\n\npages = require './views/pages.coffee'\nPylon.set 'adminView', require('./views/adminView.coffee').adminView\nloadScript = require(\"./lib/loadScript.coffee\").loadScript\nloadScript Pylon.get('hostUrl')+\"logon.js\", (status)->\n  console.log \"logon.js returns status of \"+status\n\n{uploader,eventModelLoader} = require \"./lib/upload.coffee\"\n\n###\nSection: Data Structures\n Routines to create and handle data structures and interfaces to them\n###\n\nsystemCommunicator = Backbone.Model.extend\n  defaults:\n    calibrating: false\n    recording: false\n    connected: []\n    calibrate: false\n    loggedIn:  false\n\nPylon.set 'globalState', new systemCommunicator\n\nclinicModel = Backbone.Model.extend()\n\nclinicCollection = Backbone.Collection.extend\n  model: clinicModel\n  url: Pylon.get('hostUrl')+'clinics'\n\nclinics = new clinicCollection\nPylon.set('clinics',clinics)\n\n# #Clinicians --\nclinicianModel = Backbone.Model.extend\n  defaults:\n    name: 'Text'\n    password: 'Password'\nclinicianCollection = Backbone.Collection.extend\n  model: clinicianModel\nclinicians = new clinicianCollection\nPylon.set('clinicians',clinicians)\n\n# #Clients --\nclientModel = Backbone.Model.extend\n  defaults:\n    name: 'Text'\n    patientOnly: 'Boolean'\nclientCollection = Backbone.Collection.extend\n  model: clientModel\nclients = new clientCollection\nPylon.set('clients',clients)\n\n# #Test Protocols\nprotocol = Backbone.Model.extend\n  defaults:\n    name: \"Other\"\n    comments: \"Other\"\n    mileStones: \"initiation,completion\"\nprotocolCollection = Backbone.Collection.extend\n  model: protocol\n  url: Pylon.get('hostUrl')+'protocols'\nprotocols = new protocolCollection\nPylon.set('protocols',protocols)\n\nadminData = Backbone.Model.extend()\nadmin = new adminData\n    clinics: clinics\n    clinicians: clinicians\n    clients: clients\n    protocol: protocols\n\nrawSession = Backbone.Model.extend {\n  idAttribute: '_id'\n  url: Pylon.get('hostUrl')+'session'\n}\n\napplicationVersion = require './version.coffee'\nsessionInfo = new rawSession\n  user: ''\n  clinic: ''\n  patient: ''\n  testID: ''\n  leftSensorUUID: ''\n  rightSensorUUID: ''\n  platformIosVersion: ''\n  applicationVersion: applicationVersion\nconsole.log \"app Ver:\", sessionInfo.get 'applicationVersion'\n\npageGen = new pages.Pages sessionInfo\nPylon.set 'pageGen', pageGen\nPylon.set 'sessionInfo', sessionInfo\nconsole.log \"sessionInfo created as: \", sessionInfo\n\n{EventModel} = require \"./models/event-model.coffee\"\nadminEvent = new EventModel \"Action\"\nPylon.on 'systemEvent', (what=\"unknown\")->\n  if sessionInfo.id\n    adminEvent.addSample what\n\n\naButtonModel = Backbone.Model.extend\n  defaults:\n    active: false\n    funct: ->\n    text: '--'\n    selector: 'button'\n\nactivateNewButtons = ->\n  DebugButton = new BV 'debug'\n  DebugButton.set\n    legend: \"Show Log\"\n    enabled: true\n\n  Pylon.on \"systemEvent:debug:show-log\",() ->\n    DebugButton.set legend: \"Hide Log\"\n    $('#footer').show()\n    return false\n\n  Pylon.on \"systemEvent:debug:hide-log\", ()->\n    DebugButton.set legend: \"Show Log\"\n    $('#footer').hide()\n    return false\n  $('#footer').hide()\n\n  ActionButton = new BV 'admin'\n  ActionButton.set\n    legend: \"Log In\"\n    enabled: true\n  Pylon.on \"systemEvent:admin:log-in\", enterAdmin\n  Pylon.on \"systemEvent:admin:log-out\", exitAdmin\n\n  Pylon.on \"admin:disable\", ->\n    ActionButton.set 'enabled',false\n  Pylon.on \"admin:enable\", ->\n    ActionButton.set 'enabled',true\n\n  ClearButton = new BV 'clear',\"u-full-width\"\n  ClearButton.set\n    legend: \"Reject\"\n    enabled: false\n  Pylon.on \"systemEvent:clear:reject\", enterClear\n\n  UploadButton = new BV 'upload',\"u-full-width\"\n  UploadButton.set\n    legend: \"Accept\"\n    enabled: false\n  Pylon.on \"systemEvent:upload:accept\", enterUpload\n\n  CalibrateButton = new BV 'calibrate'\n  CalibrateButton.set\n    legend: \"--\" # was Calibrate to generate the SystemEvent triggers below\n    enabled: false\n  Pylon.on \"systemEvent:calibrate:backdoor\", ()->\n  # reject backdoor request if no protocol is selected\n    if !sessionInfo.get 'testID'\n      pageGen.forceTest 'red'\n    Pylon.trigger 'recordCountDown:start', 5\n    console.log('enter Recording --- actively recording sensor info')\n\n  Pylon.on \"systemEvent:calibrate:exit-calibration\", exitCalibrate\n\n  ActionButton = new BV 'action'\n  ActionButton.set\n    legend: \"Record\"\n    enabled: false\n  Pylon.on \"systemEvent:action:record\", enterRecording\n  Pylon.on \"systemEvent:action:stop\", exitRecording\n\nenterAdmin = ->\n  try\n    pageGen.activateAdminPage()\n  catch e\n    console.log \"failure in activatAdminPage\",e\n  return false\n\nexitAdmin = () ->\n  enterLogout()\n  return false\n\nenterLogout = () ->\n  g=Pylon.get 'globalState'\n  g.set loggedIn: false, recording: false\n  # devices no longer contain collections of readings, now is an EventModel\n\n  model = Pylon.get('sessionInfo')\n  model.unset 'clinic', silent: true\n  model.unset 'clinician', silent: true\n  model.unset 'password', silent: true\n  model.unset 'client', silent: true\n  model.unset 'testID', silent: true\n\n  $('#password').val('')\n  $('option:selected').prop('selected',false)\n  $('option.forceSelect').prop('selected',true)\n  $('#done').removeClass('button-primary').addClass('disabled').attr('disabled','disabled').off('click')\n\n  (Pylon.get 'button-action').set enabled: false\n  Pylon.trigger 'admin:enable'\n  (Pylon.get 'button-admin').set legend:\"Log In\" , enabled: true\n\n  (pylon.get 'button-upload').set 'enabled',false\n  (pylon.get 'button-clear').set 'enabled',false\n  return false\n\n# ## Section State Handlers\n\ninitAll = ->\n  rtemp = undefined\n  # start with the logging info suppressed\n  Pylon.trigger \"systemEvent:debug:Hide Log\"\n  $('#uuid').html(\"Must connect to sensor\").css('color',\"violet\")\n  enterAdmin()\n  return\n\n## subsection State handlers that depend on the View\nenterClear = (accept=false)->\n  # Clear only clears the data -- does NOT disconnedt\n  Pylon.trigger \"removeRecorderWindow\"\n\n  $('#testID').prop(\"disabled\",false)\n  pageGen.forceTest()\n  sessionInfo.set accepted: accept\n  sessionInfo.save()\n    .done ->  # only remove clear, upload buttons on success\n      sessionInfo.set '_id',null,{silent:true}\n      enableRecordButtonOK()\n      (Pylon.get 'button-clear').set 'enabled',false\n      (Pylon.get 'button-upload').set 'enabled',false\n    .fail (errorResponse)->\n      alert \"Host Reject:#{errorResponse.status}\"\n\n# upload and clear keys are equivalent and only suggest failure or success\nenterUpload = ->\n  return enterClear true\n\nenterCalibrate = ->\n  return\n  console.log('enterCalibrate -- not used currently')\n  calibrating = true\n  (Pylon.get 'button-action').set\n    enabled: true\n    legend: \"Record\"\n  (Pylon.get 'button-calibrate').set\n    legend: \"Exit Calibration\"\n    enabled: false\n  return false\n\nexitCalibrate = ->\n  calibrating = false\n  (Pylon.get 'button-calibrate').set 'legend',\"Calibrate\"\n  return false\n\nenterRecording = ->\n  # reject record request if no protocol is selected\n  testID = sessionInfo.get 'testID'\n  if !testID\n    pageGen.forceTest 'red'\n    return false\n  numSensors=0\n  numSensors++ if Pylon.get \"Left\"\n  numSensors++ if Pylon.get \"Right\"\n  if numSensors < testID.get 'sensorsNeeded' \n    pageGen.forceTest 'red',\"need sensor\"\n    return false\n\n  # sync the sessionInfo up to the server as an empty\n  # session structure.  We need the mongo _id that the server\n  # sends back\n  if !sessionInfo.get '_id'\n    sessionInfo.save()\n    return false\n  (Pylon.get 'button-admin').set 'enabled',false\n  # reject record request if we are already recording\n  gs = Pylon.get('globalState')\n  return if gs.get 'recording'\n  # start recording and show a lead in timer of 5 seconds\n  gs.set 'recording',  true\n  $('#testID').prop(\"disabled\",true)\n  Pylon.trigger 'recordCountDown:start', 5\n  console.log('enter Recording --- actively recording sensor info')\n\nPylon.on ('recordCountDown:fail'), ->\n    pageGen.forceTest 'orange'\n    gs.set 'recording',  false\n    $('#testID').prop(\"disabled\",true)\n\nPylon.on 'recordCountDown:over', ->\n  # change the record button into the stop button\n  (Pylon.get 'button-action').set\n    enabled: true\n    legend: \"Stop\"\n  return false\n\nexitRecording = -> # Stop Recording\n  gs = Pylon.get('globalState')\n  return if 'stopping' == gs.get 'recording'\n  gs.set 'recording', 'stopping'\n  Pylon.trigger 'stopCountDown:start', 5\n  Pylon.get('button-action').set enabled: false\n  (Pylon.get 'button-admin').set 'enabled',true\n  return false\n\nPylon.on 'stopCountDown:over', ->\n  console.log('enter Stop -- stop recording')\n  Pylon.trigger 'systemEvent:endRecording'\n  Pylon.get('globalState').set 'recording',  false\n  (Pylon.get 'button-upload').set 'enabled',true\n  (Pylon.get 'button-clear').set 'enabled',true\n  (Pylon.get 'button-admin').set 'enabled',true\n  return false\n\n\n#\n# ### Subsection State Handlers that depend on the Hardware\nstartBlueTooth = ->\n  TiHandlerDef = require('./TiHandler.coffee')\n  TiHandler = new TiHandlerDef sessionInfo\n  window.TiHandler = TiHandler\n  Pylon.set 'TiHandler', TiHandler\n\nsetSensor = ->\n  pageGen.activateSensorPage()\n  return false\n\nenableRecordButtonOK= ()->\n  #clear out any readings from an old session\n  (Pylon.get 'Left')?.set numReadings: 0\n  (Pylon.get 'Right')?.set numReadings: 0\n  canRecord = true\n  gs=Pylon.get('globalState')\n  if ! gs.get 'connected'\n    canRecord = false\n    (Pylon.get \"button-scan\").set enabled: true\n  if ! gs.get 'loggedIn'\n    canRecord = false\n    (Pylon.get \"button-admin\").set enabled: true, legend: \"log in\"\n  if canRecord\n    (Pylon.get 'button-action').set legend: \"record\", enabled: true\n  return false\n\nPylon.on 'connected', ->\n  console.log('enterConnected -- enable recording button')\n  Pylon.get('globalState').set connected: true\n  return enableRecordButtonOK()\n\nPylon.on 'adminDone', ->\n  (Pylon.get 'button-admin').set 'legend',\"Log Out\"\n  Pylon.get('globalState').set 'loggedIn',  true\n  pageGen.activateSensorPage()\n  return enableRecordButtonOK()\n\nprotocolsShowedErrors=1\ngetProtocol = ->\n  protocols.on 'change', ()->\n    console.log \"got reply from server for protocol collection\"\n  protocols.fetch\n    success: (collection,response,options)->\n      console.log \"protocols request success\"\n      collection.trigger 'fetched'\n    error: (collection,response,options)->\n      protocolsShowedErrors--\n      if protocolsShowedErrors\n        return\n      protocolsShowedErrors=15\n      console.log (Pylon.get('hostUrl')+'protocols'), \"protocols fetch error - response:\", response.statusText\n\nprotocolTimer = setInterval getProtocol, 500\nprotocols.on 'fetched' , ->\n  clearInterval protocolTimer\n\nclinicShowedErrors=1\ngetClinics = ->\n  clinics.on 'change', ()->\n    console.log \"got reply from server for clinics collection\"\n  clinics.fetch\n    success: (collection,response,options)->\n      console.log \"clinic request success\"\n      collection.trigger 'fetched'\n    error: (collection,response,options)->\n      clinicShowedErrors--\n      if clinicShowedErrors\n        return\n      clinicShowedErrors=15\n      console.log (Pylon.get('hostUrl')+'clinics')\n      console.log \"clinics fetch error - response\"\n      console.log response.statusText\n      console.log \"clinics fetch error - collection\"\n      console.log collection\nclinicTimer = setInterval getClinics,600\nclinics.on 'fetched', ->\n  clearInterval clinicTimer\n### this is how seen exports things -- it's clean.  we use it as example\n#seen = {}\n#if window? then window.seen = seen # for the web\n#if module?.exports? then module.exports = seen # for node\n#\n#  And since we are in a browser ---\n###\nwindow.$=$\nwindow.sessionInfo = sessionInfo\nwindow.Pages = pageGen\nwindow.Me = this\n#---\n# generated by js2coffee 2.0.1\nPylon.test = (page='test.html')->\n  window.location.assign(page)\nPylon.a = ()->\n  window.location.assign 'alabaster.html'\n\n$(document).on 'deviceready', ->\n  sessionInfo.set 'platformUUID' , window.device?.uuid || \"No ID\"\n  sessionInfo.set('platformIosVersion',window.device?.version|| \"noPlatform\")\n  $(\"#platformUUID\").text sessionInfo.attributes.platformUUID\n  $(\"#platformIosVersion\").text sessionInfo.attributes.platformIosVersion\n  startBlueTooth()\n  return\n\n$ ->\n  # Force a page reload if put in background to wipe the sessionInfo and other state\n  document.addEventListener 'resume',()->\n    window.location.reload()\n  document.addEventListener 'online', ()->\n    require './lib/net-view.coffee'\n\n  pageGen.renderPage()\n  activateNewButtons()\n  if $('#console-log')?\n    window.console=console = new Console('console-log',this)\n    Pylon.trigger \"systemEvent:debug:Hide Log\"\n  initAll()\n  setSensor()\n  return false\n","undoManager":{"mark":-140,"position":100,"stack":[[{"start":{"row":282,"column":6},"end":{"row":282,"column":7},"action":"remove","lines":["'"],"id":667}],[{"start":{"row":282,"column":12},"end":{"row":282,"column":13},"action":"remove","lines":["'"],"id":668}],[{"start":{"row":288,"column":5},"end":{"row":288,"column":6},"action":"insert","lines":["t"],"id":669}],[{"start":{"row":288,"column":6},"end":{"row":288,"column":7},"action":"insert","lines":["e"],"id":670}],[{"start":{"row":288,"column":7},"end":{"row":288,"column":8},"action":"insert","lines":["s"],"id":671}],[{"start":{"row":288,"column":8},"end":{"row":288,"column":9},"action":"insert","lines":["t"],"id":672}],[{"start":{"row":288,"column":9},"end":{"row":288,"column":10},"action":"insert","lines":["I"],"id":673}],[{"start":{"row":288,"column":10},"end":{"row":288,"column":11},"action":"insert","lines":["D"],"id":674}],[{"start":{"row":288,"column":11},"end":{"row":288,"column":12},"action":"insert","lines":["."],"id":675}],[{"start":{"row":288,"column":12},"end":{"row":288,"column":13},"action":"insert","lines":["b"],"id":676}],[{"start":{"row":288,"column":13},"end":{"row":288,"column":14},"action":"insert","lines":["e"],"id":677}],[{"start":{"row":288,"column":14},"end":{"row":288,"column":15},"action":"insert","lines":["r"],"id":678}],[{"start":{"row":288,"column":14},"end":{"row":288,"column":15},"action":"remove","lines":["r"],"id":679}],[{"start":{"row":288,"column":13},"end":{"row":288,"column":14},"action":"remove","lines":["e"],"id":680}],[{"start":{"row":288,"column":12},"end":{"row":288,"column":13},"action":"remove","lines":["b"],"id":681}],[{"start":{"row":288,"column":12},"end":{"row":288,"column":13},"action":"insert","lines":["g"],"id":682}],[{"start":{"row":288,"column":13},"end":{"row":288,"column":14},"action":"insert","lines":["e"],"id":683}],[{"start":{"row":288,"column":14},"end":{"row":288,"column":15},"action":"insert","lines":["t"],"id":684}],[{"start":{"row":288,"column":15},"end":{"row":288,"column":16},"action":"insert","lines":[" "],"id":685}],[{"start":{"row":288,"column":16},"end":{"row":288,"column":17},"action":"insert","lines":["'"],"id":686}],[{"start":{"row":288,"column":17},"end":{"row":288,"column":18},"action":"insert","lines":["s"],"id":687}],[{"start":{"row":288,"column":18},"end":{"row":288,"column":19},"action":"insert","lines":["e"],"id":688}],[{"start":{"row":288,"column":19},"end":{"row":288,"column":20},"action":"insert","lines":["n"],"id":689}],[{"start":{"row":288,"column":20},"end":{"row":288,"column":21},"action":"insert","lines":["s"],"id":690}],[{"start":{"row":288,"column":21},"end":{"row":288,"column":22},"action":"insert","lines":["o"],"id":691}],[{"start":{"row":288,"column":22},"end":{"row":288,"column":23},"action":"insert","lines":["r"],"id":692}],[{"start":{"row":288,"column":23},"end":{"row":288,"column":24},"action":"insert","lines":["s"],"id":693}],[{"start":{"row":288,"column":24},"end":{"row":288,"column":25},"action":"insert","lines":["N"],"id":694}],[{"start":{"row":288,"column":25},"end":{"row":288,"column":26},"action":"insert","lines":["e"],"id":695}],[{"start":{"row":288,"column":26},"end":{"row":288,"column":27},"action":"insert","lines":["e"],"id":696}],[{"start":{"row":288,"column":27},"end":{"row":288,"column":28},"action":"insert","lines":["d"],"id":697}],[{"start":{"row":288,"column":28},"end":{"row":288,"column":29},"action":"insert","lines":["e"],"id":698}],[{"start":{"row":288,"column":29},"end":{"row":288,"column":30},"action":"insert","lines":["d"],"id":699}],[{"start":{"row":288,"column":30},"end":{"row":288,"column":31},"action":"insert","lines":["'"],"id":700}],[{"start":{"row":288,"column":31},"end":{"row":288,"column":32},"action":"insert","lines":[" "],"id":701}],[{"start":{"row":288,"column":5},"end":{"row":288,"column":6},"action":"insert","lines":["n"],"id":702}],[{"start":{"row":288,"column":6},"end":{"row":288,"column":7},"action":"insert","lines":["u"],"id":703}],[{"start":{"row":288,"column":7},"end":{"row":288,"column":8},"action":"insert","lines":["m"],"id":704}],[{"start":{"row":288,"column":8},"end":{"row":288,"column":9},"action":"insert","lines":["S"],"id":705}],[{"start":{"row":288,"column":9},"end":{"row":288,"column":10},"action":"insert","lines":["e"],"id":706}],[{"start":{"row":288,"column":10},"end":{"row":288,"column":11},"action":"insert","lines":["s"],"id":707}],[{"start":{"row":288,"column":10},"end":{"row":288,"column":11},"action":"remove","lines":["s"],"id":708}],[{"start":{"row":288,"column":10},"end":{"row":288,"column":11},"action":"insert","lines":["n"],"id":709}],[{"start":{"row":288,"column":11},"end":{"row":288,"column":12},"action":"insert","lines":["s"],"id":710}],[{"start":{"row":288,"column":12},"end":{"row":288,"column":13},"action":"insert","lines":["o"],"id":711}],[{"start":{"row":288,"column":13},"end":{"row":288,"column":14},"action":"insert","lines":["r"],"id":712}],[{"start":{"row":288,"column":14},"end":{"row":288,"column":15},"action":"insert","lines":["s"],"id":713}],[{"start":{"row":288,"column":15},"end":{"row":288,"column":16},"action":"insert","lines":[" "],"id":714}],[{"start":{"row":288,"column":16},"end":{"row":288,"column":17},"action":"insert","lines":["<"],"id":715}],[{"start":{"row":288,"column":17},"end":{"row":288,"column":18},"action":"insert","lines":[" "],"id":716}],[{"start":{"row":288,"column":45},"end":{"row":289,"column":0},"action":"insert","lines":["",""],"id":717},{"start":{"row":289,"column":0},"end":{"row":289,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":289,"column":4},"end":{"row":289,"column":5},"action":"insert","lines":["p"],"id":718}],[{"start":{"row":289,"column":5},"end":{"row":289,"column":6},"action":"insert","lines":["a"],"id":719}],[{"start":{"row":289,"column":6},"end":{"row":289,"column":7},"action":"insert","lines":["g"],"id":720}],[{"start":{"row":289,"column":7},"end":{"row":289,"column":8},"action":"insert","lines":["e"],"id":721}],[{"start":{"row":289,"column":8},"end":{"row":289,"column":9},"action":"insert","lines":["G"],"id":722}],[{"start":{"row":289,"column":9},"end":{"row":289,"column":10},"action":"insert","lines":["e"],"id":723}],[{"start":{"row":289,"column":10},"end":{"row":289,"column":11},"action":"insert","lines":["n"],"id":724}],[{"start":{"row":289,"column":11},"end":{"row":289,"column":12},"action":"insert","lines":["."],"id":725}],[{"start":{"row":289,"column":12},"end":{"row":289,"column":13},"action":"insert","lines":["f"],"id":726}],[{"start":{"row":289,"column":13},"end":{"row":289,"column":14},"action":"insert","lines":["o"],"id":727}],[{"start":{"row":289,"column":14},"end":{"row":289,"column":15},"action":"insert","lines":["r"],"id":728}],[{"start":{"row":289,"column":15},"end":{"row":289,"column":16},"action":"insert","lines":["c"],"id":729}],[{"start":{"row":289,"column":16},"end":{"row":289,"column":17},"action":"insert","lines":["e"],"id":730}],[{"start":{"row":289,"column":17},"end":{"row":289,"column":18},"action":"insert","lines":["T"],"id":731}],[{"start":{"row":289,"column":18},"end":{"row":289,"column":19},"action":"insert","lines":["e"],"id":732}],[{"start":{"row":289,"column":19},"end":{"row":289,"column":20},"action":"insert","lines":["s"],"id":733}],[{"start":{"row":289,"column":20},"end":{"row":289,"column":21},"action":"insert","lines":["t"],"id":734}],[{"start":{"row":289,"column":21},"end":{"row":289,"column":22},"action":"insert","lines":[" "],"id":735}],[{"start":{"row":289,"column":22},"end":{"row":289,"column":23},"action":"insert","lines":["'"],"id":736}],[{"start":{"row":289,"column":23},"end":{"row":289,"column":24},"action":"insert","lines":["r"],"id":737}],[{"start":{"row":289,"column":24},"end":{"row":289,"column":25},"action":"insert","lines":["e"],"id":738}],[{"start":{"row":289,"column":25},"end":{"row":289,"column":26},"action":"insert","lines":["d"],"id":739}],[{"start":{"row":289,"column":26},"end":{"row":289,"column":27},"action":"insert","lines":["'"],"id":740}],[{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"insert","lines":[","],"id":741}],[{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"insert","lines":["\""],"id":742}],[{"start":{"row":289,"column":29},"end":{"row":289,"column":30},"action":"insert","lines":["n"],"id":743}],[{"start":{"row":289,"column":30},"end":{"row":289,"column":31},"action":"insert","lines":["e"],"id":744}],[{"start":{"row":289,"column":31},"end":{"row":289,"column":32},"action":"insert","lines":["e"],"id":745}],[{"start":{"row":289,"column":32},"end":{"row":289,"column":33},"action":"insert","lines":["d"],"id":746}],[{"start":{"row":289,"column":33},"end":{"row":289,"column":34},"action":"insert","lines":[" "],"id":747}],[{"start":{"row":289,"column":34},"end":{"row":289,"column":35},"action":"insert","lines":["S"],"id":748}],[{"start":{"row":289,"column":35},"end":{"row":289,"column":36},"action":"insert","lines":["e"],"id":749}],[{"start":{"row":289,"column":36},"end":{"row":289,"column":37},"action":"insert","lines":["n"],"id":750}],[{"start":{"row":289,"column":37},"end":{"row":289,"column":38},"action":"insert","lines":["s"],"id":751}],[{"start":{"row":289,"column":38},"end":{"row":289,"column":39},"action":"insert","lines":["o"],"id":752}],[{"start":{"row":289,"column":39},"end":{"row":289,"column":40},"action":"insert","lines":["r"],"id":753}],[{"start":{"row":289,"column":39},"end":{"row":289,"column":40},"action":"remove","lines":["r"],"id":754}],[{"start":{"row":289,"column":38},"end":{"row":289,"column":39},"action":"remove","lines":["o"],"id":755}],[{"start":{"row":289,"column":37},"end":{"row":289,"column":38},"action":"remove","lines":["s"],"id":756}],[{"start":{"row":289,"column":36},"end":{"row":289,"column":37},"action":"remove","lines":["n"],"id":757}],[{"start":{"row":289,"column":35},"end":{"row":289,"column":36},"action":"remove","lines":["e"],"id":758}],[{"start":{"row":289,"column":34},"end":{"row":289,"column":35},"action":"remove","lines":["S"],"id":759}],[{"start":{"row":289,"column":34},"end":{"row":289,"column":35},"action":"insert","lines":["s"],"id":760}],[{"start":{"row":289,"column":35},"end":{"row":289,"column":36},"action":"insert","lines":["e"],"id":761}],[{"start":{"row":289,"column":36},"end":{"row":289,"column":37},"action":"insert","lines":["n"],"id":762}],[{"start":{"row":289,"column":37},"end":{"row":289,"column":38},"action":"insert","lines":["s"],"id":763}],[{"start":{"row":289,"column":38},"end":{"row":289,"column":39},"action":"insert","lines":["o"],"id":764}],[{"start":{"row":289,"column":39},"end":{"row":289,"column":40},"action":"insert","lines":["r"],"id":765}],[{"start":{"row":289,"column":40},"end":{"row":289,"column":41},"action":"insert","lines":["\""],"id":766}],[{"start":{"row":289,"column":41},"end":{"row":290,"column":16},"action":"insert","lines":["","    return false"],"id":767}]]},"ace":{"folds":[],"scrolltop":2257.5,"scrollleft":0,"selection":{"start":{"row":290,"column":4},"end":{"row":290,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1479613159000}